##AJAX：
  1.概念： ASynchronous JavaScript And XML  异步的JavaScript和XML
    1.异步和同步 ：客户端和服务器端相互通信的基础上
      *客户端必须等待服务器端的响应。在等待的期间客户端不能做其他操作。
      *客户端不需要等待服务器端的响应。在等待的期间客户端可以做其他操作。
            *AJAX 在浏览器与 Web 服务器之间使用异步数据传输（HTTP 请求），这样就可使网页从服务器请求少量的信息，而不是整个页面
  2.实现方式：
    1.原生的JS实现方式
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <title>Title</title>
                <script>
                    //定义方法
                    function fun() {
                        //发送异步请求
                        //1.创建核心对象
                        var xmlhttp;
                        {// code for IE7+,Firefox,Chrome,Opera,Safari
                            xmlhttp=new XMLHttpRequest();
                        }
                        else
                            {//code for IE6,IE3
                                xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");

                        }
                        //2.发送请求
                        /**
                         *          请求的类型：GET或POST
                         *              *get方式，请求参数在URL后边拼接。send方法为空参
                         *              *post方式，请求参数在send方法中定义
                         *          url: 文件在服务器上的位置
                         *          async:true(异步)或false(同步)
                         */
                        xmlhttp.open("GET","ajaxServlet?username=tom",true);

                        //3.发送请求  里面接收一个字符串，仅支持post请求
                        xmlhttp.send();
                        //4.接受并处理来自服务器的响应结果
                        //获取方式：xmlhttp.respomseText
                        //什么时候获取？当服务器响应成功后再获取
                        //当xmlhttp对象的就绪状态改变是，触发事件onreadystatechange
                        xmlhttp.onreadystatechange=function(){
                            /**
                             * 0：请求未初始化
                             * 1：服务器连接已建立
                             * 2：请求已接收
                             * 3：请求处理中
                             * 4：请求已完成，且响应已就绪
                             */
                            //判断就绪状态是否为4，响应的状态码是否为200
                            if (xmlhttp.readyState==4 && xmlhttp.status==200){
                                //获取服务器的响应结果
                                var responseText=xmlhttp.responseText;
                                alert(responseText);
                            }
                        }
                    }
                </script>
            </head>
            <body>
                <input type="button" value="发送异步请求" onclick="fun()">
            </body>
            </html>
    2.JQuery实现方式
      1.$.ajax()
        *语法： $.ajax({键值对})

            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <title>Title</title>
                <script src="jquery-3.3.1.min.js"></script>
                <script>
                    //定义方法
                    function fun() {
                        //使用$.ajax()发送异步请求
                        $.ajax({
                            url:"ajaxServlet",//请求路径
                            type:"POST",//请求方式
                            // data:"username=jack&age=23",//请求参数
                            data:{"username":"jack","age":23}
                            success:function (data) {//data是接收服务器响应的结果
                                alert(date())
                            },//响应成功后的回调函数

                            //error表示如果请求未响应出现错误，会执行的回调函数
                            error:function () {
                                alert("出错了")
                            },

                            dataType:"text"//设置接受到的响应参数的格式
                            //一般最后一个语句不需要加  逗号 ,



                        });
                    }
                </script>
            </head>
            <body>
                <input type="button" value="发送异步请求" onclick="fun()">
            </body>
            </html>

      2.$.get()
        *语法：$.get(url,[data],[callback],[type])
            *参数：
                * url:请求路径
                * data:请求参数
                * callback:回调函数
                * type:响应结果的类型
      3.$.post
