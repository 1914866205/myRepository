redis
    (可以解决高并发)
    1.概念：redis是一款高性能的NOSQL（not only sql）的关系型数据库
        关系型数据库：
                     1. 数据之间有关联关系
                     2. 数据存储在硬盘的文件上
       非关系型数据库：
                     1.数据之间没有关联关系（如键值对，redis）
                     2.数据存储在内存中

    2.下载安装
        1.官网：https://redis.io
        2.中文网: http://www.redis.net.cn/
        3.解压直接可以使用
            * redis.windows.conf:配置文件
            * redis-cli.exe:redis的客户端
            * redis-server.exe:redis服务器
        3.命令操作
        1.redis的数据结构:
            端口：127.0.0.1：6379
            *redis存储的是: key,value 格式的数据,其中key都是字符串,value有5种不同的数据结构
                * value的数据结构
                    1.字符串类型 string
                    2.哈希列表 hash :map格式
                    3.列表类型 list : linkedlist格式.支持重复元素
                    4.集合类型 set:不允许重复元素
                    5.有序集合类型 sortedset:不允许重复元素，且元素有顺序

        2.字符串类型 string
            1.存储： set key value
            2.获取： get key
            3.删除： del key

        3.哈希类型 hash
            1.存储： hset key field value
                    设置  对象  属性  值
            2.获取：
                    * hget key field:获取指定的field的键和值
                    * hgetall key:获取所有的field的键和值
            3.删除： hdel key field

        4.列表类型 list:可以添加一个元素到列表的头部（左边）或者尾部（右边）
            1.添加：
                1. lpush key value: 将元素加入列表左边
                2. rpush key value: 将元素加入列表右边
            2.获取：
                * lrange key start end : 范围获取
                * lrange key 0 -1 : 获取所有的
            3.删除：
                * lpop key:删除列表最左边的元素，并将元素返回
                * rpop key:删除列表最右边的元素，并将元素返回
      5.集合类型 set:不允许重复元素
            1.存储： sadd key value
            2.获取： smembers key :获取set集合中所有元素
            3.删除： srem key value : 删除set集合中的某个元素
      6.有序集合类型 sortedset:不允许重复元素，且元素有顺序
            1.存储： zadd key score value
            2.获取： zrange key start end
            3.删除： zrem key value
                127.0.0.1:6379>zrem mysort lisi
      7.通用命令
            1.keys * : 查询所有的键
            2.type key:获取键对应的value类型
            3.del key: 删除指定的key , value

    4.持久化
        1.redis是一个内存数据库,当redis服务器重启,获取电脑重启，
            数据会丢失，我们可以将redis内存中的数据持久化保存到硬盘文件中。
        2.redis持久化机制：
            1.RDB:默认方式，不需要进行配置，默认就使用这种机制
                * 在一定的间隔时间中，检测key的变化情况，然后持久化数据
                1.编辑redis.windows.conf文件
                    # after 900sec (15min) if at least 1 key change
                    save 900 1
                    # after 300sec (5min) if at least 10 key change
                    save 300 10
                    # after 60sec if at least 10000 key change
                    save 60 10000
                2.重新启动redis服务器，并指定配置文件名称
                    redis-server.exe redis.windows.conf
            2.AOF:日志记录的方式，可以记录每一条命令的操作。可以每一次命令  操作后，都持久化数据
                1.编辑redis.windows.conf文件
                    appendonly no (关闭aof) -->appendonly yes (开启aof)

                    # appendfsync always :  每一次操作都进行持久化
                    # appendfsync everysec : 每隔一秒进行一次持久化
                    # appendfsync no :      不进行持久化

        5.Java客户端 Jedis
            * Jdeis:一款java操作redis数据库的工具.
            * 使用步骤：
                1.下载jedis的jar包
                2. 使用
                    1.获取连接 //如果使用空参，默认连本机的localhoust和默认端口6379端口
                            Jedis jedis=new Jedis("loaclhost ", 6379);
                    2.操作
                            //存储string
                            jedis.set("username","zhangsan);
                            //获取
                            String username=jedis.get("username");
                            //可以使用setex()方法存储可以指定过期时间的 key value
                            //将activecode,hehe键值对存入redis,并且20秒后自动删除该键值对
                            jedis.setex("activecode",20,"hehe);

                            //存储hash
                            jedis.hset("user","name","zhangsan");
                            jedis.hset("user","age","23");
                            jedis.hset("user","gender","male");
                            //获取hash
                            String name=jedis.hget("user","name);
                            //获取hash的所有map中的数据
                            Map<String,String> user=jedis.hgetAll("user");
                            //keyset
                            Set<String> keySet =user.keySet();
                            for(String key:keySet){
                                //获取value
                                String value=user.get(key);
                                System,ou.ptingln(key+"***+value);
                            }

                            //list存储
                            jedis.lpush("mylist","a","b","c");//从左边存
                            jedis.rpush("mylist","a","b","c");//从右边存
                            // list:范围获取
                            List<String> mylist=jedis.lrange("mylist",0,-1);
                            System,ou.ptingln(mylist);
                            //list 弹出
                            String element1=jedis.lpop("mylist");//c
                            System,ou.ptingln(element1);
                            String element2=jedis.lpop("mylist");//c
                            System,ou.ptingln(element2);

                            //set存储
                            jedis.sadd("myset","java","php","C++");

                            //sortedset
                            jedis.zadd("mysortedset",1,"a");
                            jedis.zadd("mysortedset",30,"c");
                            jedis.zadd("mysortedset",15,"b");
                            //sortedset获取
                            Set<String> mysortedset =jedis.zrange("mu=ysortedset",0,-1);
                            System,ou.ptingln(mysortedset);//输出 abc

                    3.关闭连接
                            jedis.close();

            * Jedis操作各种redis中的数据结构
                         1.字符串类型 string
                            set
                            get
                         2.哈希列表 hash :map格式
                            hset
                            hget
                         3.列表类型 list : linkedlist格式.支持重复元素
                            lpush/rpush
                            lpop/rpop
                         4.集合类型 set:不允许重复元素
                            sadd
                         5.有序集合类型 sortedset:不允许重复元素，且元素有顺序
                            zadd

        * jedis连接池： JedisPool
                * 使用：
                    1.创建JedisPool连接池对象
                    2.调用方法getResorce()方法获取Jedis连接

                        /*
                            jeids连接池使用
                        */
                        @Test
                        public void test(){
                       //0.创建一个配置对象
                       JedisPoolConfig config=new JedisPoolConfig();
                       config.setMaxTotal(50);//最大连接数目
                       config.setMaxIdle(10);//最大空闲连接


                        //1.创建Jedis连接池对象
                      //  JedisPool jedisPool=new JedisPool();
                        JedisPool jedisPool=new JedisPool(config,"localhost",6379 );
                        //2.获取连接
                        Jedis jedis =jedisPool.getResource();
                        //3.使用
                        jedis.set("hehe","haha");
                        //4.关闭连接池
                        jedis.close();
                        }


*注意：
    使用redis缓存一些不经常发送变化的数据
        * 数据库的数据一旦发送改变，则需要进行更新
            * 数据库的表执行了增删改的相关操作，需要将redis缓存数据情况，再次存入
            * 在service对应的增删改方法中，将redis数据删除














